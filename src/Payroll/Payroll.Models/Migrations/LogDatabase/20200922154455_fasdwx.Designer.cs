// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Payroll.Database;

namespace Payroll.Migrations.LogDatabase
{
    [DbContext(typeof(LogDbContext))]
    [Migration("20200922154455_fasdwx")]
    partial class fasdwx
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Payroll.Model.Logs.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(128);

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("Payroll.Model.Logs.EventDataType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EventDataTypes");
                });

            modelBuilder.Entity("Payroll.Model.Logs.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionDetails");

                    b.Property<string>("AffectedEmployeeIds");

                    b.Property<string>("DataItemKey");

                    b.Property<int>("EventDataTypeId");

                    b.Property<int>("EventLogTypeId");

                    b.Property<int>("EventResultId");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Summary");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("UserAgent");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("EventDataTypeId");

                    b.HasIndex("EventLogTypeId");

                    b.HasIndex("EventResultId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("Payroll.Model.Logs.EventLogType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EventLogTypes");
                });

            modelBuilder.Entity("Payroll.Model.Logs.EventResult", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.Property<string>("TextColor");

                    b.HasKey("Id");

                    b.ToTable("EventResults");
                });

            modelBuilder.Entity("Payroll.Model.Logs.EventLog", b =>
                {
                    b.HasOne("Payroll.Model.Logs.EventDataType", "EventDataType")
                        .WithMany()
                        .HasForeignKey("EventDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payroll.Model.Logs.EventLogType", "EventLogType")
                        .WithMany()
                        .HasForeignKey("EventLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payroll.Model.Logs.EventResult", "EventResult")
                        .WithMany()
                        .HasForeignKey("EventResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
