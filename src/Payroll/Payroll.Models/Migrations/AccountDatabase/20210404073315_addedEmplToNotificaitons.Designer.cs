// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Payroll.Database;

namespace Payroll.Models.Migrations.AccountDatabase
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20210404073315_addedEmplToNotificaitons")]
    partial class addedEmplToNotificaitons
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("AutoHistory");
                });

            modelBuilder.Entity("Payroll.Models.AccessGrant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApplyOnDate");

                    b.Property<int>("CompanyAccountId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Reason");

                    b.Property<string>("Roles");

                    b.Property<string>("RolesConstraint");

                    b.Property<int>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessGrants");
                });

            modelBuilder.Entity("Payroll.Models.AccessGrantRole", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("AccessGrantRoles");
                });

            modelBuilder.Entity("Payroll.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Payroll.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<bool>("ChangePasswordOnLogin");

                    b.Property<int?>("CompanyAccountId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTimeStamp");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NickName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("SendOtpAndLoginFirst");

                    b.Property<string>("TimeZone");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAccountId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Payroll.Models.AppUserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DeviceIcon");

                    b.Property<string>("IPAdress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDeviceReviwed");

                    b.Property<DateTime>("LoggedDate");

                    b.Property<DateTime>("LoggedOutDate");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("PlatformIcon");

                    b.Property<string>("UserAgent");

                    b.Property<string>("UserId");

                    b.Property<string>("UserPlatform");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogin");
                });

            modelBuilder.Entity("Payroll.Models.AppUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Payroll.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Payroll.Models.CompanyAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("ApprovedById");

                    b.Property<string>("ApprovedByName");

                    b.Property<DateTime?>("ApprovedOnDate");

                    b.Property<string>("CompanyRegistrationNo");

                    b.Property<double>("ComplectionPercent");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CurrencyFormat");

                    b.Property<string>("CurrencySymbol");

                    b.Property<string>("DateFormat");

                    b.Property<string>("DayOfWeekHolidays");

                    b.Property<string>("DayOfWeekOffDays");

                    b.Property<string>("Email");

                    b.Property<string>("Hotline");

                    b.Property<bool?>("IncludeEndDate");

                    b.Property<bool?>("IncludeStartDate");

                    b.Property<int?>("IndustryId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsEndDateOnNextMonth");

                    b.Property<bool>("IsKpiConfigured");

                    b.Property<string>("KpiConfig");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("ManagingDirector");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameFormat");

                    b.Property<string>("NextStep");

                    b.Property<int?>("PayrolPeriodClosingDateHDaysAfterEndDate");

                    b.Property<int?>("PayrolPeriodDays");

                    b.Property<int?>("PayrolPeriodEndDate");

                    b.Property<int?>("PayrolPeriodPayDate");

                    b.Property<int?>("PayrolPeriodPayDateHDaysAfterCloseDate");

                    b.Property<int?>("PayrolPeriodStartDate");

                    b.Property<string>("ProgressBySteps");

                    b.Property<int>("ProgressPercent");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("TaxCode");

                    b.Property<decimal?>("TaxPercentValue");

                    b.Property<string>("TimeFormat");

                    b.Property<string>("TimeZone");

                    b.Property<string>("Website");

                    b.Property<string>("WeekStartDay")
                        .IsRequired();

                    b.Property<int>("WhenToApplyPaidTimeOffPolicyAfterJoining");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IndustryId");

                    b.ToTable("CompanyAccounts");
                });

            modelBuilder.Entity("Payroll.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Payroll.Models.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("Payroll.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionTakenDate");

                    b.Property<string>("Avatar");

                    b.Property<int>("CompanyAccountId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("EmployeesWithRoles");

                    b.Property<string>("EntityId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsXhrRequest");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NotificationActionTakenType")
                        .IsRequired();

                    b.Property<int>("NotificationTypeId");

                    b.Property<int?>("ParentNotificationId");

                    b.Property<DateTime?>("ReceivedDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("SentDate");

                    b.Property<int>("Step");

                    b.Property<string>("Summary");

                    b.Property<string>("SummaryHtml");

                    b.Property<int?>("ToBeReceivedBy");

                    b.Property<string>("Url");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAccountId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("ParentNotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Payroll.Models.NotificationType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ChangedProperty");

                    b.Property<string>("Color");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("EntityType")
                        .IsRequired();

                    b.Property<string>("Icon");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsXhrRequest");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NotificationLevel")
                        .IsRequired();

                    b.Property<string>("NotificationReceivedBy")
                        .IsRequired();

                    b.Property<bool>("RequireApproveRejectAction");

                    b.Property<bool>("RequireReceivedNotes");

                    b.Property<string>("SummaryTextWithPlaceholder");

                    b.Property<string>("Type");

                    b.Property<string>("UrlWithPlaceholder");

                    b.Property<string>("UsersWithRoles");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Payroll.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedByIp");

                    b.Property<DateTime>("Expires");

                    b.Property<string>("ReplacedByToken");

                    b.Property<DateTime?>("Revoked");

                    b.Property<string>("RevokedByIp");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Payroll.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Payroll.Models.ReportView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyAccountId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ReportId");

                    b.Property<int?>("ReportId1");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("ViewedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAccountId");

                    b.HasIndex("ReportId1");

                    b.HasIndex("UserId");

                    b.ToTable("ReportViews");
                });

            modelBuilder.Entity("Payroll.Models.RequestNumberFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoActionSummary");

                    b.Property<int>("CompanyAccountId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("FormatString");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsResetAnnually");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Prefix")
                        .HasMaxLength(5);

                    b.Property<int>("RequestType");

                    b.Property<int>("StartingNumber");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAccountId");

                    b.ToTable("RequestNumberFormats");
                });

            modelBuilder.Entity("Payroll.Models.RequestProcessConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalByEmployeeIds");

                    b.Property<int?>("AutoAction");

                    b.Property<int>("AutoActionAfterHours");

                    b.Property<string>("AutoActionSummary");

                    b.Property<int>("CompanyAccountId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApprovalByDefinedEmployees");

                    b.Property<bool>("IsApprovalByDepartmentHead");

                    b.Property<bool>("IsAutomaticActiomAfterSubmission");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("RequestType");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAccountId");

                    b.ToTable("RequestProcessConfig");
                });

            modelBuilder.Entity("Payroll.Models.ScheduledSystemTask", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CronExpression");

                    b.Property<string>("Description");

                    b.Property<string>("HangfireIdentifier");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastProcessedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ScheduledSystemTasks");
                });

            modelBuilder.Entity("Payroll.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Payroll.Models.TaskRunReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRecurringJob");

                    b.Property<string>("JobName");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Report");

                    b.Property<int>("TaskReportType");

                    b.HasKey("Id");

                    b.ToTable("TaskRunReports");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Payroll.Models.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Payroll.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Payroll.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Payroll.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Payroll.Models.AccessGrant", b =>
                {
                    b.HasOne("Payroll.Models.CompanyAccount", "CompanyAccount")
                        .WithMany("AccessGrants")
                        .HasForeignKey("CompanyAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payroll.Models.AppUser", "User")
                        .WithMany("AccessGrants")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Payroll.Models.AppUser", b =>
                {
                    b.HasOne("Payroll.Models.CompanyAccount", "CompanyAccount")
                        .WithMany()
                        .HasForeignKey("CompanyAccountId");
                });

            modelBuilder.Entity("Payroll.Models.AppUserLogin", b =>
                {
                    b.HasOne("Payroll.Models.AppUser", "AppUser")
                        .WithMany("AppUserLogins")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Payroll.Models.AppUserRole", b =>
                {
                    b.HasOne("Payroll.Models.AppRole", "AppRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payroll.Models.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Payroll.Models.City", b =>
                {
                    b.HasOne("Payroll.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Payroll.Models.CompanyAccount", b =>
                {
                    b.HasOne("Payroll.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Payroll.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");
                });

            modelBuilder.Entity("Payroll.Models.Notification", b =>
                {
                    b.HasOne("Payroll.Models.CompanyAccount", "CompanyAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("CompanyAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payroll.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payroll.Models.Notification", "ParentNotification")
                        .WithMany("ChildNotifications")
                        .HasForeignKey("ParentNotificationId");

                    b.HasOne("Payroll.Models.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Payroll.Models.RefreshToken", b =>
                {
                    b.HasOne("Payroll.Models.AppUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Payroll.Models.ReportView", b =>
                {
                    b.HasOne("Payroll.Models.CompanyAccount", "CompanyAccount")
                        .WithMany()
                        .HasForeignKey("CompanyAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Payroll.Models.Report", "Report")
                        .WithMany("ReportViews")
                        .HasForeignKey("ReportId1");

                    b.HasOne("Payroll.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Payroll.Models.RequestNumberFormat", b =>
                {
                    b.HasOne("Payroll.Models.CompanyAccount", "CompanyAccount")
                        .WithMany()
                        .HasForeignKey("CompanyAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Payroll.Models.RequestProcessConfig", b =>
                {
                    b.HasOne("Payroll.Models.CompanyAccount", "CompanyAccount")
                        .WithMany("RequestProcessConfigs")
                        .HasForeignKey("CompanyAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Payroll.Models.State", b =>
                {
                    b.HasOne("Payroll.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
