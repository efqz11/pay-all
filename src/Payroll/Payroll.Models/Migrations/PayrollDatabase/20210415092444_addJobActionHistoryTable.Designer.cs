// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Payroll.Database;

namespace Payroll.Models.Migrations.PayrollDatabase
{
    [DbContext(typeof(PayrollDbContext))]
    [Migration("20210415092444_addJobActionHistoryTable")]
    partial class addJobActionHistoryTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("AutoHistory");
                });

            modelBuilder.Entity("Payroll.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatedEmployeeId");

                    b.Property<string>("EmployeeIdsData");

                    b.Property<string>("EmployeeSelectorVm");

                    b.Property<DateTime?>("End");

                    b.Property<DateTime?>("ExpiredDate");

                    b.Property<bool>("HasSummary");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("PublishedDate");

                    b.Property<DateTime?>("Start");

                    b.Property<int>("Status");

                    b.Property<string>("Summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("TotalInteractionsCount");

                    b.Property<int>("ViewedCount");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedEmployeeId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Payroll.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CheckInTime");

                    b.Property<DateTime?>("CheckOutTime");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CompanyWorkTimeId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("CreatedFromRequestId");

                    b.Property<int>("CurrentStatus");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Day");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("ErroMsg");

                    b.Property<bool>("HasClockRecords");

                    b.Property<bool>("HasError");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCheckOutUpdated");

                    b.Property<bool>("IsCheckinUpdated");

                    b.Property<bool>("IsCreatedFromRequest");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOvertime");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsTransferred");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Month");

                    b.Property<DateTime>("PublishedDate");

                    b.Property<int?>("ScheduleId");

                    b.Property<string>("ShiftColor");

                    b.Property<int>("ShiftId");

                    b.Property<string>("ShiftName");

                    b.Property<string>("StatusUpdates");

                    b.Property<double>("TotalAfterWorkMins");

                    b.Property<double>("TotalBreakHours");

                    b.Property<double>("TotalDefecitHours");

                    b.Property<double>("TotalEarlyMins");

                    b.Property<double>("TotalHoursWorkedOutOfSchedule");

                    b.Property<double>("TotalHoursWorkedPerSchedule");

                    b.Property<double>("TotalLateMins");

                    b.Property<double>("TotalWorkedHours");

                    b.Property<double>("TotalWorkedHoursCalculated");

                    b.Property<int>("Week");

                    b.Property<DateTime>("WorkEndTime");

                    b.Property<DateTime>("WorkStartTime");

                    b.Property<bool>("WorkedOverTime");

                    b.Property<int>("Year");

                    b.Property<bool>("bySchduler");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyWorkTimeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Payroll.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditAction");

                    b.Property<DateTime>("AuditDateTimeUtc");

                    b.Property<int>("AuditType");

                    b.Property<string>("AuditUser");

                    b.Property<string>("AuditUserId");

                    b.Property<string>("AuditUserRoles");

                    b.Property<string>("ChangedColumns");

                    b.Property<int>("CompanyId");

                    b.Property<string>("ContextName");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("FullContextName");

                    b.Property<string>("FullModelName");

                    b.Property<int>("JobId");

                    b.Property<string>("KeyId");

                    b.Property<string>("KeyValues");

                    b.Property<string>("Message");

                    b.Property<string>("ModelName");

                    b.Property<string>("NewValues");

                    b.Property<string>("OldValues");

                    b.Property<string>("Status");

                    b.Property<string>("TableName");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Payroll.Models.BackgroundJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnouncementId");

                    b.Property<int?>("CompanyAccountId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Details");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("EndActions");

                    b.Property<DateTime?>("EndedDate");

                    b.Property<string>("HangfireJobId");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("IndividualId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("NextRunDate");

                    b.Property<DateTime>("RunDate");

                    b.Property<int?>("ScheduleId");

                    b.Property<int>("TaskStatus");

                    b.Property<int>("TaskType");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("IndividualId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("BackgroundJobs");
                });

            modelBuilder.Entity("Payroll.Models.BiometricRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttendanceId");

                    b.Property<int>("BiometricRecordState");

                    b.Property<int>("BiometricRecordType");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Data");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("Day");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("Hour");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManualEntry");

                    b.Property<string>("Location");

                    b.Property<string>("MachineId");

                    b.Property<int>("Minute");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Month");

                    b.Property<int>("OrderBy");

                    b.Property<int>("Second");

                    b.Property<TimeSpan>("Time");

                    b.Property<int>("Week");

                    b.Property<int?>("WorkItemId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("BiometricRecords");
                });

            modelBuilder.Entity("Payroll.Models.Company", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<double>("EarlyOntimeMinutes");

                    b.Property<double>("FlexibleBreakHourCount");

                    b.Property<string>("Hotline");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBreakHourStrict");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("ManagingDirector");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OvertimCalculationBasis");

                    b.Property<int>("OvertimeCliffHours");

                    b.Property<bool>("SetOffDefecitHoursAgainstOvertime");

                    b.Property<string>("TaxCode");

                    b.Property<decimal?>("TaxPercentValue");

                    b.Property<bool>("TrackOvertime");

                    b.Property<string>("Website");

                    b.Property<int>("WorkType");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Payroll.Models.CompanyFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyFolderId");

                    b.Property<int>("ContentLength");

                    b.Property<string>("ContentType");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(10);

                    b.Property<string>("FileName");

                    b.Property<double>("FileSizeInMb");

                    b.Property<string>("FileUrl");

                    b.Property<string>("FillableConfiguration");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSignatureAvailable");

                    b.Property<bool>("IsSignatureSetupCompleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyFolderId");

                    b.ToTable("CompanyFiles");
                });

            modelBuilder.Entity("Payroll.Models.CompanyFileShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyFileId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("FileConfigValues");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSigned");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("SharedDate");

                    b.Property<DateTime>("SignedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyFileId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CompanyFileShares");
                });

            modelBuilder.Entity("Payroll.Models.CompanyFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyFolders");
                });

            modelBuilder.Entity("Payroll.Models.CompanyPublicHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsImported");

                    b.Property<bool>("IsManualEntry");

                    b.Property<bool>("IsPublicHoliday");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Year")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyPublicHolidays");
                });

            modelBuilder.Entity("Payroll.Models.CompanyWorkBreakTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFlexible");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("TotakBreaks");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyWorkBreakTimes");
                });

            modelBuilder.Entity("Payroll.Models.CompanyWorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCombination");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsShift");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ShiftName");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("TotakBreaks");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyWorkTimes");
                });

            modelBuilder.Entity("Payroll.Models.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccruralCarryoverFromPreviousYear");

                    b.Property<int>("BeginingOfEmployment");

                    b.Property<bool>("CanPlanAhead");

                    b.Property<bool>("CanRequestForBackDatedDays");

                    b.Property<decimal>("CarryOverLimit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Color");

                    b.Property<int>("CompanyId");

                    b.Property<bool>("ConsiderTimeTrackedAsOvertime");

                    b.Property<int>("ConsquetiveDaysRequire");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("DayOffGrantEntititlementAt");

                    b.Property<int>("DayOffGrantEntititlementEvery");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableAccruralPolicy");

                    b.Property<bool>("EnableWaitingTime");

                    b.Property<int>("EndOfEmployment");

                    b.Property<int>("EntitilementGrantedDuringWaitingTime");

                    b.Property<bool>("ExcludeForPublicHoliday");

                    b.Property<string>("ExtraDaysAfter");

                    b.Property<int?>("Gender");

                    b.Property<bool>("GrantExtraDayWithStartOfNextEntitlementPeriod");

                    b.Property<bool>("GrantExtraDaysBasedOnTimeOfEmployment");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsByRequest");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmergency");

                    b.Property<bool>("IsForSpecificGender");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("MustRequestBefore");

                    b.Property<int?>("MustRequestBeforeAlert");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("RequireSubstitiute");

                    b.Property<bool>("RequireSubstitiuteOptional");

                    b.Property<bool>("RequiredDocumentForConseqetiveDays");

                    b.Property<string>("RequiredDocumentList");

                    b.Property<bool>("RequiredDocuments");

                    b.Property<int>("TotalDays");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DayOffs");
                });

            modelBuilder.Entity("Payroll.Models.DayOffEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("DayOffId");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("NextRefreshDate");

                    b.Property<int>("TotalCollectedDays");

                    b.Property<int>("TotalDays");

                    b.Property<int>("TotalRemainingDays");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DayOffEmployees");
                });

            modelBuilder.Entity("Payroll.Models.DayOffEmployeeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("CreatedFromRequestId");

                    b.Property<bool>("CreatedManually");

                    b.Property<int>("DayOffEmployeeId");

                    b.Property<DateTime>("End");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCreatedFromRequest");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("RequestId");

                    b.Property<DateTime>("Start");

                    b.Property<int>("Status");

                    b.Property<int>("TotalDays");

                    b.HasKey("Id");

                    b.HasIndex("DayOffEmployeeId");

                    b.HasIndex("RequestId");

                    b.ToTable("DayOffEmployeeItems");
                });

            modelBuilder.Entity("Payroll.Models.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("Payroll.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(10);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RenewedFrom");

                    b.Property<decimal>("TotalHeadCount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("WorkHoursPerWeek")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Payroll.Models.DepartmentHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DepartmentHeads");
                });

            modelBuilder.Entity("Payroll.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("TotalHeadCount")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Payroll.Models.EmergencyContactRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EmergencyContactRelationships");
                });

            modelBuilder.Entity("Payroll.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundJobDetails");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CompanyId");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CssClass");

                    b.Property<DateTime?>("DateCancelled");

                    b.Property<DateTime?>("DateExpiry");

                    b.Property<DateTime?>("DateOfJoined");

                    b.Property<DateTime?>("DateOfTermination");

                    b.Property<DateTime?>("DateRegistered");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("DisplayOrder");

                    b.Property<int?>("DivisionId");

                    b.Property<string>("EmailWork");

                    b.Property<int?>("EmergencyContactRelationshipId");

                    b.Property<string>("EmpID");

                    b.Property<int>("EmploymentStatus");

                    b.Property<int>("EmploymentType");

                    b.Property<int>("EmploymentTypeOther");

                    b.Property<string>("FacebookId");

                    b.Property<string>("Grade");

                    b.Property<bool?>("HasBackgroundJob");

                    b.Property<bool?>("HasBackgroundJobEnded");

                    b.Property<bool>("HasUserAccount");

                    b.Property<int>("HrStatus");

                    b.Property<int>("IndividualId");

                    b.Property<string>("InstagramId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsResponsibleForAccounts");

                    b.Property<bool>("IsResponsibleForPensionCharges");

                    b.Property<string>("JobIDString");

                    b.Property<int?>("JobId");

                    b.Property<string>("JobTitle");

                    b.Property<int?>("JobType");

                    b.Property<DateTime?>("LastDayAtWork");

                    b.Property<int>("LengthOfProbation");

                    b.Property<string>("LinkedInId");

                    b.Property<int?>("LocationId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("NextRunDate");

                    b.Property<string>("NickName");

                    b.Property<DateTime?>("NoticeDate");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PercentStr");

                    b.Property<string>("PhoneWork");

                    b.Property<string>("PhoneWorkExt")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("ProbationEndDate");

                    b.Property<DateTime?>("ProbationStartDate");

                    b.Property<int?>("ReportingEmployeeId");

                    b.Property<string>("TaxFileNumber");

                    b.Property<int?>("TeamId");

                    b.Property<string>("TwitterId");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.Property<string>("UserPicture");

                    b.Property<int>("WeeklyWorkingHours");

                    b.Property<bool>("bySchduler");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmergencyContactRelationshipId");

                    b.HasIndex("IndividualId");

                    b.HasIndex("JobId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReportingEmployeeId");

                    b.HasIndex("TeamId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Payroll.Models.EmployeeAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmployeePayComponentId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("JobId");

                    b.Property<string>("Message");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("OnDate");

                    b.Property<int?>("PayAdjustmentId");

                    b.Property<int>("RecordStatus");

                    b.Property<string>("Remarks");

                    b.Property<int?>("ReportingEmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeePayComponentId");

                    b.HasIndex("JobId");

                    b.HasIndex("PayAdjustmentId");

                    b.HasIndex("ReportingEmployeeId");

                    b.ToTable("EmployeeActions");
                });

            modelBuilder.Entity("Payroll.Models.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressType");

                    b.Property<string>("City");

                    b.Property<int?>("CityId");

                    b.Property<string>("Country");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("RecordStatus");

                    b.Property<string>("State");

                    b.Property<int?>("StateId");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddresses");
                });

            modelBuilder.Entity("Payroll.Models.EmployeeEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CollegeInstitution");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Degree");

                    b.Property<int>("DegreeId");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("End");

                    b.Property<string>("GPA");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsOnGoing");

                    b.Property<string>("MajorSpecilization");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEducations");
                });

            modelBuilder.Entity("Payroll.Models.EmployeePassport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("IssuedDate");

                    b.Property<string>("IssuingCountryCode")
                        .IsRequired();

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Notes");

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePassports");
                });

            modelBuilder.Entity("Payroll.Models.EmployeePayComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("EmploymentId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("PayAdjustmentId");

                    b.Property<int?>("PayComponentChangeReason");

                    b.Property<int>("PayFrequency");

                    b.Property<int>("RecordStatus");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("PayAdjustmentId");

                    b.ToTable("EmployeePayComponents");
                });

            modelBuilder.Entity("Payroll.Models.EmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalendarDefaults");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description");

                    b.Property<bool>("Enable2fa");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("UserAccessRights");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("Payroll.Models.EmployeeRoleRelation", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<int>("EmployeeRoleId");

                    b.HasKey("EmployeeId", "EmployeeRoleId");

                    b.HasIndex("EmployeeRoleId");

                    b.ToTable("EmployeeRoleRelations");
                });

            modelBuilder.Entity("Payroll.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("EmploymentStatus");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("RecordStatus");

                    b.Property<int?>("TerminationReasonId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TerminationReasonId");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("Payroll.Models.EmployeeVisaInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("IssuedDate");

                    b.Property<string>("IssuingCountryCode")
                        .IsRequired();

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<int>("VisaId");

                    b.Property<int>("VisaStatus");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VisaId");

                    b.ToTable("EmployeeVisaInfos");
                });

            modelBuilder.Entity("Payroll.Models.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("DirectlyReportingToMD");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("JobId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("RecordStatus");

                    b.Property<int?>("ReportingEmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobId");

                    b.HasIndex("ReportingEmployeeId");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("Payroll.Models.FileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnouncementId");

                    b.Property<int>("CompanyId");

                    b.Property<int>("ContentLength");

                    b.Property<string>("ContentType");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(10);

                    b.Property<string>("FileName");

                    b.Property<double>("FileSizeInMb");

                    b.Property<int>("FileType");

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNameChangeable");

                    b.Property<bool>("IsSignatureAvailable");

                    b.Property<bool>("IsSignatureSetupCompleted");

                    b.Property<bool>("IsUploaded");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.Property<int?>("RequestId");

                    b.Property<int?>("WorkItemId");

                    b.Property<int?>("WorkItemSubmissionId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("WorkItemId");

                    b.HasIndex("WorkItemSubmissionId");

                    b.ToTable("FileDatas");
                });

            modelBuilder.Entity("Payroll.Models.Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<string>("BankAccountName");

                    b.Property<string>("BankAccountNumber");

                    b.Property<string>("BankName");

                    b.Property<string>("Bio_About");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DisplayOrder");

                    b.Property<string>("EmailPersonal");

                    b.Property<string>("EmergencyContactName");

                    b.Property<string>("EmergencyContactNumber");

                    b.Property<int?>("EmergencyContactRelationshipId");

                    b.Property<string>("FacebookId");

                    b.Property<string>("FathersName");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<string>("IdentityNumber");

                    b.Property<int>("IdentityType");

                    b.Property<int>("Initial");

                    b.Property<string>("InstagramId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastContractEndDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastPromotionDate");

                    b.Property<string>("LinkedInId");

                    b.Property<string>("MiddleName");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("MothersName");

                    b.Property<int?>("NationalityId");

                    b.Property<string>("NickName");

                    b.Property<string>("PhonePersonal");

                    b.Property<int>("RCN");

                    b.Property<int?>("SecondaryLanguageId");

                    b.Property<string>("TwitterId");

                    b.HasKey("Id");

                    b.HasIndex("EmergencyContactRelationshipId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("SecondaryLanguageId");

                    b.ToTable("Individual");
                });

            modelBuilder.Entity("Payroll.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DayOffIds");

                    b.Property<int>("DepartmentId");

                    b.Property<int?>("DivisionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JobID");

                    b.Property<int>("JobStatus");

                    b.Property<string>("JobTitle");

                    b.Property<int>("JobType");

                    b.Property<int>("LevelId");

                    b.Property<int?>("LocationId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("ReportingJobId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LevelId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReportingJobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Payroll.Models.JobActionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("DepartmentId");

                    b.Property<int?>("DivisionId");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("IndividualId");

                    b.Property<string>("IndividualName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("JobId");

                    b.Property<int?>("LocationId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("OnDate");

                    b.Property<int?>("PreviousEmployeeId");

                    b.Property<int?>("PreviousJobId");

                    b.Property<int?>("RelatedRequestId");

                    b.Property<string>("Remarks");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IndividualId");

                    b.HasIndex("JobId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PreviousEmployeeId");

                    b.HasIndex("PreviousJobId");

                    b.HasIndex("RelatedRequestId");

                    b.ToTable("JobActionHistories");
                });

            modelBuilder.Entity("Payroll.Models.JobPayComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("JobId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("PayAdjustmentId");

                    b.Property<int?>("PayComponentChangeReason");

                    b.Property<int>("PayFrequency");

                    b.Property<int>("RecordStatus");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("PayAdjustmentId");

                    b.ToTable("JobPayComponents");
                });

            modelBuilder.Entity("Payroll.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Payroll.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CurrencyCode");

                    b.Property<string>("CurrencySymbol");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Payroll.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Payroll.Models.PayAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalculationOrder");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool?>("EnforceRequirement");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsFilledByEmployee");

                    b.Property<bool?>("IsPensionCharge");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("VariationType");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PayAdjustments");
                });

            modelBuilder.Entity("Payroll.Models.PayAdjustmentFieldConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseType");

                    b.Property<string>("Calculation");

                    b.Property<string>("CalculationIdentifier");

                    b.Property<int>("CalculationOrder");

                    b.Property<string>("CeilValueCalculation");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DisplayName");

                    b.Property<string>("EvalMethod");

                    b.Property<int>("FieldType");

                    b.Property<bool>("HasCeilValue");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAggregated");

                    b.Property<bool>("IsClientCalculatable");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEditable");

                    b.Property<bool>("IsReturn");

                    b.Property<bool>("IsServerCalculatable");

                    b.Property<string>("ListFilter");

                    b.Property<string>("ListSelect");

                    b.Property<int>("ListType");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("OnBlur");

                    b.Property<int?>("PayAdjustmentId");

                    b.Property<string>("UpdateInputClass");

                    b.Property<int?>("WorkId");

                    b.HasKey("Id");

                    b.HasIndex("PayAdjustmentId");

                    b.ToTable("PayAdjustmentFieldConfigs");
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("GrossPay")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("GrossPayLastPeriod")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGenerated");

                    b.Property<DateTime?>("LastApprovalSubmissionDate");

                    b.Property<DateTime?>("LastGeneratedDateTime");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("NetSalaryLastPeriod")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("PayDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Summary");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PayrollPeriods");
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriodEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbsentDays");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ChartDataX");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Designation");

                    b.Property<string>("EmpID");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Grade");

                    b.Property<DateTime?>("GradeGeneratedDateTime");

                    b.Property<decimal>("GrossPay")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGraded");

                    b.Property<int>("LateDays");

                    b.Property<double>("LateHours");

                    b.Property<double>("LateMins");

                    b.Property<double>("LeaveDays");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OvertimeCount");

                    b.Property<double>("OvertimeHours");

                    b.Property<double>("OvertimeMins");

                    b.Property<int>("PayrollPeriodId");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PercentStr");

                    b.Property<double>("TaskCompletedCount");

                    b.Property<decimal>("TaskCreditSum")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TaskDebitSum")
                        .HasColumnType("decimal(18,4)");

                    b.Property<double>("TaskFailedCount");

                    b.Property<int>("TaskRemainingCount");

                    b.Property<int>("TaskSubmissionsCount");

                    b.Property<double>("WorkedHours");

                    b.Property<double>("WorkedMins");

                    b.Property<int>("WorkedRecordsCount");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollPeriodId");

                    b.ToTable("PayrollPeriodEmployees");
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriodPayAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjustment")
                        .IsRequired();

                    b.Property<int>("CalculationOrder");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeName");

                    b.Property<int>("PayAdjustmentId");

                    b.Property<int>("PayrollPeriodId");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("VariationType");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayAdjustmentId");

                    b.HasIndex("PayrollPeriodId");

                    b.ToTable("PayrollPeriodPayAdjustments");
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriodPayAdjustmentFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseType");

                    b.Property<string>("Calculation");

                    b.Property<string>("CalculationIdentifier");

                    b.Property<int>("CalculationOrder");

                    b.Property<string>("DisplayName");

                    b.Property<string>("DisplayedValueFrontEnd");

                    b.Property<string>("EvalMethod");

                    b.Property<int>("FieldType");

                    b.Property<bool>("IsAggregated");

                    b.Property<bool>("IsClientCalculatable");

                    b.Property<bool>("IsEditable");

                    b.Property<bool>("IsManualEntry");

                    b.Property<bool>("IsReturn");

                    b.Property<bool>("IsServerCalculatable");

                    b.Property<string>("Key");

                    b.Property<string>("ListFilter");

                    b.Property<string>("ListSelect");

                    b.Property<int>("ListType");

                    b.Property<string>("OnBlur");

                    b.Property<string>("PayAdjustment");

                    b.Property<int>("PayrollPeriodPayAdjustmentId");

                    b.Property<bool>("ThresholdValue");

                    b.Property<string>("UpdateInputClass");

                    b.Property<string>("Value");

                    b.Property<string>("ValueInt");

                    b.Property<string>("ValueString");

                    b.Property<int>("VariationType");

                    b.HasKey("Id");

                    b.HasIndex("PayrollPeriodPayAdjustmentId");

                    b.ToTable("PayrollPeriodPayAdjustmentFieldValues");
                });

            modelBuilder.Entity("Payroll.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("About");

                    b.Property<int>("BeforeOrAfter");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("EmployeeRoleId");

                    b.Property<int>("In");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Note");

                    b.Property<int>("Of");

                    b.Property<int>("RemindAction");

                    b.Property<int>("When");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeRoleId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Payroll.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionTakenDate");

                    b.Property<string>("ActionTakenReasonSummary");

                    b.Property<string>("ActionTakenUserId");

                    b.Property<string>("ActionTakenUserName");

                    b.Property<int?>("AttendanceId");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DayOffId");

                    b.Property<string>("DocumentType");

                    b.Property<string>("DocumentsData");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("End");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCustomReason");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLetter");

                    b.Property<bool>("IsTransferEmployee");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<TimeSpan?>("NewCheckOutTime");

                    b.Property<TimeSpan?>("NewCheckinTime");

                    b.Property<int>("Number");

                    b.Property<string>("NumberFormat");

                    b.Property<string>("Reason");

                    b.Property<int>("RequestType");

                    b.Property<DateTime?>("Start");

                    b.Property<int>("Status");

                    b.Property<string>("StatusUpdates");

                    b.Property<DateTime?>("SubmissionDate");

                    b.Property<int>("TotalDays");

                    b.Property<int?>("TransferredEmployeeId");

                    b.Property<string>("TransferredEmployeeName");

                    b.Property<int?>("WorkItemId");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TransferredEmployeeId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Payroll.Models.RequestApprovalConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AutoAction");

                    b.Property<int>("AutoActionAfterHours");

                    b.Property<string>("AutoActionSummary");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DayOffId");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EmployeeRoleId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAutomaticActiomAfterSubmission");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("RequestProceessConfigActionBy");

                    b.Property<int>("RequestType");

                    b.Property<int>("Step");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeRoleId");

                    b.ToTable("RequestApprovalConfigs");
                });

            modelBuilder.Entity("Payroll.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundJobDetails");

                    b.Property<int?>("BackgroundJobId");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DaysData");

                    b.Property<int?>("DepartmentId");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<string>("EmployeeIds");

                    b.Property<string>("EmployeeIdsData");

                    b.Property<DateTime?>("End");

                    b.Property<string>("HangfireJobId");

                    b.Property<bool?>("HasBackgroundJob");

                    b.Property<bool?>("HasBackgroundJobEnded");

                    b.Property<bool>("HaveConflicts");

                    b.Property<string>("IgnoreDaysData");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEffectiveImmediately");

                    b.Property<bool>("IsForAllEmployees");

                    b.Property<bool>("IsForDepartment");

                    b.Property<bool>("IsRepeatEndDateNever");

                    b.Property<bool>("IsRepeating");

                    b.Property<int>("MinHours");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("NextRunDate");

                    b.Property<int?>("ParentScheduleId");

                    b.Property<int>("Repeat");

                    b.Property<DateTime?>("RepeatEndDate");

                    b.Property<DateTime>("RosterGeneratedDate");

                    b.Property<int>("ScheduleFor");

                    b.Property<int>("SelectedMenu");

                    b.Property<int>("Slots");

                    b.Property<DateTime>("Start");

                    b.Property<int>("Status");

                    b.Property<string>("TimeZone");

                    b.Property<int>("WorkId");

                    b.Property<string>("WorkName");

                    b.Property<string>("WorkTimeIds");

                    b.Property<string>("WorkTimeIdsData");

                    b.Property<int>("_ConseqetiveDays");

                    b.Property<string>("_Patten");

                    b.Property<string>("_PattenString");

                    b.Property<double>("_TotalWorkingHoursPerWeek");

                    b.Property<bool>("bySchduler");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Payroll.Models.SecondaryLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SecondaryLanguages");
                });

            modelBuilder.Entity("Payroll.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("DisplayOrder");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Payroll.Models.TerminationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TerminationReasons");
                });

            modelBuilder.Entity("Payroll.Models.VariationKeyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<int>("KeyId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("MultiOrder");

                    b.Property<int>("PayrollPeriodEmployeeId");

                    b.Property<int>("Type");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("PayrollPeriodEmployeeId");

                    b.ToTable("VariationKeyValues");
                });

            modelBuilder.Entity("Payroll.Models.Visa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Visa");
                });

            modelBuilder.Entity("Payroll.Models.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCombination");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Details");

                    b.Property<int>("DisplayOrder");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<int>("Frequency");

                    b.Property<bool>("HasTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdvancedCreate");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("LessDeduct")
                        .HasColumnType("decimal(18,4)");

                    b.Property<double>("MinsBeforeCheckIn");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("MoreCredit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<TimeSpan>("StartTime");

                    b.Property<int>("TotalRequiredCount");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Payroll.Models.WorkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttendanceId");

                    b.Property<int?>("AttendnaceId");

                    b.Property<DateTime?>("CheckInTime");

                    b.Property<DateTime?>("CheckOutTime");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Day");

                    b.Property<DateTime?>("DueDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("HasAttendance");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCheckOutUpdated");

                    b.Property<bool>("IsCheckinUpdated");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmployeeTask");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsTransferred");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Month");

                    b.Property<int>("PercentApproved");

                    b.Property<int>("PercentSubmitted");

                    b.Property<DateTime>("PublishedDate");

                    b.Property<int>("RemainingSubmissions");

                    b.Property<int?>("ScheduleId");

                    b.Property<int>("Status");

                    b.Property<string>("TaskDescription");

                    b.Property<string>("TaskName");

                    b.Property<decimal>("TotalAmountCredited")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalAmountDeducted")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TotalApproved");

                    b.Property<double>("TotalEarlyMins");

                    b.Property<double>("TotalLateMins");

                    b.Property<int>("TotalSubmitted");

                    b.Property<double>("TotalWorkedMins");

                    b.Property<int>("Week");

                    b.Property<string>("WorkColor");

                    b.Property<DateTime>("WorkEndTime");

                    b.Property<int?>("WorkId");

                    b.Property<DateTime>("WorkStartTime");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("Payroll.Models.WorkItemSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionTakenDate");

                    b.Property<string>("ActionTakenReasonSummary");

                    b.Property<string>("ActionTakenUserId");

                    b.Property<string>("ActionTakenUserName");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Details");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("SentForApprovalDate");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("SubmissionDate");

                    b.Property<int>("WorkItemId");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WorkItemSubmissions");
                });

            modelBuilder.Entity("Payroll.ViewModels.KpiValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Actual");

                    b.Property<int>("Best");

                    b.Property<DateTime>("ChangedDate");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<string>("CreatedByRoles");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsChanged");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Kpi");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("ModifiedByName");

                    b.Property<string>("ModifiedByRoles");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("PayrollPeriodEmployeeId");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,4)");

                    b.Property<float>("PercentDecrease");

                    b.Property<float>("PercentIncrease");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Str");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Worst");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollPeriodEmployeeId");

                    b.ToTable("KpiValues");
                });

            modelBuilder.Entity("Payroll.Models.Announcement", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("Announcements")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "CreatedEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Attendance", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.CompanyWorkTime", "CompanyWorkTime")
                        .WithMany()
                        .HasForeignKey("CompanyWorkTimeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Schedule", "Schedule")
                        .WithMany("Attendances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.BackgroundJob", b =>
                {
                    b.HasOne("Payroll.Models.Announcement", "Announcement")
                        .WithMany("backgroundJobs")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Individual", "Individual")
                        .WithMany("BackgroundJobs")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Schedule", "Schedule")
                        .WithMany("backgroundJobs")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.BiometricRecord", b =>
                {
                    b.HasOne("Payroll.Models.Attendance", "Attendance")
                        .WithMany("BiometricRecords")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.WorkItem", "WorkItem")
                        .WithMany()
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.CompanyFile", b =>
                {
                    b.HasOne("Payroll.Models.CompanyFolder", "CompanyFolder")
                        .WithMany("CompanyFiles")
                        .HasForeignKey("CompanyFolderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.CompanyFileShare", b =>
                {
                    b.HasOne("Payroll.Models.CompanyFile", "CompanyFile")
                        .WithMany("CompanyFileShares")
                        .HasForeignKey("CompanyFileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.CompanyFolder", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("CompanyFolders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.CompanyPublicHoliday", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("CompanyPublicHolidays")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.CompanyWorkBreakTime", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("BreakTimes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.CompanyWorkTime", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("WorkTimes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.DayOff", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("DayOffs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.DayOffEmployee", b =>
                {
                    b.HasOne("Payroll.Models.DayOff", "DayOff")
                        .WithMany("DayOffEmployees")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("DayOffEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.DayOffEmployeeItem", b =>
                {
                    b.HasOne("Payroll.Models.DayOffEmployee", "DayOffEmployee")
                        .WithMany("DayOffEmployeeItems")
                        .HasForeignKey("DayOffEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Request", "Request")
                        .WithMany("DayOffEmployeeItems")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Degree", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Department", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.DepartmentHead", b =>
                {
                    b.HasOne("Payroll.Models.Department", "Department")
                        .WithMany("DepartmentHeads")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("DepartmentHeads")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Division", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("Divisions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmergencyContactRelationship", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Employee", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.EmergencyContactRelationship", "EmergencyContactRelationship")
                        .WithMany()
                        .HasForeignKey("EmergencyContactRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Individual", "Individual")
                        .WithMany("Employees")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Location", "Location")
                        .WithMany("Employees")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "ReportingEmployee")
                        .WithMany("EmployeeDirectReports")
                        .HasForeignKey("ReportingEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeeAction", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("EmployeeActions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.EmployeePayComponent", "EmployeePayComponent")
                        .WithMany()
                        .HasForeignKey("EmployeePayComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.PayAdjustment", "PayAdjustment")
                        .WithMany()
                        .HasForeignKey("PayAdjustmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "ReportingEmployee")
                        .WithMany("EmployeeActionDirectReports")
                        .HasForeignKey("ReportingEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeeAddress", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeeEducation", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeePassport", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeePayComponent", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("EmployeePayComponents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employment")
                        .WithMany("EmployeePayComponents")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.PayAdjustment", "PayAdjustment")
                        .WithMany()
                        .HasForeignKey("PayAdjustmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeeRole", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeeRoleRelation", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.EmployeeRole", "EmployeeRole")
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeeType", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("EmployeeTypes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.TerminationReason", "TerminationReason")
                        .WithMany()
                        .HasForeignKey("TerminationReasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.EmployeeVisaInfo", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Visa", "Visa")
                        .WithMany()
                        .HasForeignKey("VisaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Employment", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("Employments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "ReportingEmployee")
                        .WithMany()
                        .HasForeignKey("ReportingEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.FileData", b =>
                {
                    b.HasOne("Payroll.Models.Announcement", "Announcement")
                        .WithMany("FileDatas")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("FileDatas")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Request", "Request")
                        .WithMany("FileDatas")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.WorkItem", "WorkItem")
                        .WithMany()
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.WorkItemSubmission")
                        .WithMany("FileDatas")
                        .HasForeignKey("WorkItemSubmissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Individual", b =>
                {
                    b.HasOne("Payroll.Models.EmergencyContactRelationship", "EmergencyContactRelationship")
                        .WithMany()
                        .HasForeignKey("EmergencyContactRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.SecondaryLanguage", "SecondaryLanguage")
                        .WithMany()
                        .HasForeignKey("SecondaryLanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Job", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Level", "Level")
                        .WithMany("Jobs")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Job", "ReportingJob")
                        .WithMany("ReportingJobs")
                        .HasForeignKey("ReportingJobId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.JobActionHistory", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("JobActionHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "PreviousEmployee")
                        .WithMany()
                        .HasForeignKey("PreviousEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Job", "PreviousJob")
                        .WithMany()
                        .HasForeignKey("PreviousJobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Request", "RelatedRequest")
                        .WithMany()
                        .HasForeignKey("RelatedRequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.JobPayComponent", b =>
                {
                    b.HasOne("Payroll.Models.Job", "Job")
                        .WithMany("JobPayComponents")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.PayAdjustment", "PayAdjustment")
                        .WithMany()
                        .HasForeignKey("PayAdjustmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Level", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Location", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Nationality", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.PayAdjustment", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("PayAdjustments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.PayAdjustmentFieldConfig", b =>
                {
                    b.HasOne("Payroll.Models.PayAdjustment")
                        .WithMany("Fields")
                        .HasForeignKey("PayAdjustmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriod", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("PayrollPeriods")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriodEmployee", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("PayrollPeriodEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.PayrollPeriod", "PayrollPeriod")
                        .WithMany("PayrollPeriodEmployees")
                        .HasForeignKey("PayrollPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriodPayAdjustment", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.PayAdjustment", "PayAdjustment")
                        .WithMany()
                        .HasForeignKey("PayAdjustmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.PayrollPeriod", "PayrollPeriod")
                        .WithMany("PayrollPeriodPayAdjustments")
                        .HasForeignKey("PayrollPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.PayrollPeriodPayAdjustmentFieldValue", b =>
                {
                    b.HasOne("Payroll.Models.PayrollPeriodPayAdjustment", "PayrollPeriodPayAdjustment")
                        .WithMany("PayrollPeriodPayAdjustmentFieldValues")
                        .HasForeignKey("PayrollPeriodPayAdjustmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Reminder", b =>
                {
                    b.HasOne("Payroll.Models.EmployeeRole", "EmployeeRole")
                        .WithMany("Reminders")
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Request", b =>
                {
                    b.HasOne("Payroll.Models.Attendance", "Attendance")
                        .WithMany("Requests")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.DayOff", "DayOff")
                        .WithMany()
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("Requests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "TransferredEmployee")
                        .WithMany()
                        .HasForeignKey("TransferredEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.WorkItem", "WorkItem")
                        .WithMany("Requests")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.RequestApprovalConfig", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany("RequestApprovalConfigs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.DayOff", "DayOff")
                        .WithMany()
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.EmployeeRole", "EmployeeRole")
                        .WithMany()
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Schedule", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Schedule", "ParentSchedule")
                        .WithMany("FololwingSchedules")
                        .HasForeignKey("ParentScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.SecondaryLanguage", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Team", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee")
                        .WithMany("Teams")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.TerminationReason", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.VariationKeyValue", b =>
                {
                    b.HasOne("Payroll.Models.PayrollPeriodEmployee", "PayrollPeriodEmployee")
                        .WithMany("VariationKeyValues")
                        .HasForeignKey("PayrollPeriodEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Visa", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.Work", b =>
                {
                    b.HasOne("Payroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.WorkItem", b =>
                {
                    b.HasOne("Payroll.Models.Attendance", "Attendance")
                        .WithMany()
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("WorkItems")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Schedule", "Schedule")
                        .WithMany("WorkItems")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.Work", "Work")
                        .WithMany("WorkItems")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.Models.WorkItemSubmission", b =>
                {
                    b.HasOne("Payroll.Models.WorkItem", "WorkItem")
                        .WithMany("WorkItemSubmissions")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Payroll.ViewModels.KpiValue", b =>
                {
                    b.HasOne("Payroll.Models.Employee", "Employee")
                        .WithMany("KpiValues")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Payroll.Models.PayrollPeriodEmployee", "PayrollPeriodEmployee")
                        .WithMany("KpiValues")
                        .HasForeignKey("PayrollPeriodEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
