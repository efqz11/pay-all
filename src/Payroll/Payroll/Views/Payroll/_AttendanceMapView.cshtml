@model Attendance
@inject Payroll.Database.PayrollDbContext dbContext
@{
    var date = (DateTime)ViewBag.StartDateTime;
    var startTimeSpan = date; // date.Add(TimeSpan.FromHours(date.Hour));
    var endTimeSpan = date.Add(TimeSpan.FromHours(23));

    var mappedTimes = Model.BiometricRecords
    .Where(a => a.BiometricRecordState == BiometricRecordState.CheckIn || a.BiometricRecordState == BiometricRecordState.CheckOut)
    .OrderBy(a => a.DateTime)
    .Select(a => a.DateTime)
    .ToList();

    var _bioRecrds = Model.BiometricRecords.Select(x=> new BiometricRecord
    {
        Id= x.Id,
        DateTime = x.Minute == 0 ? x.DateTime.AddMinutes(x.Minute - 1) : x.DateTime,
        BiometricRecordState = x.BiometricRecordState,
        BiometricRecordType = x.BiometricRecordType
    }).ToList();
}
<style>
    .sch-checkInOut.active {
        box-shadow: 2px 2px 2px 0px rgba(0,0,0,0.75);
    }

    .sch-checkInOut {
        background-color: #29d9ef !important;
        box-shadow: 2px 2px 2px 0px rgba(34, 121, 127, 0.75);
        position: relative;
        top: -11px;
    }

    #bioMetricDataInP {
    }

    table#bioMetricDataInP th, table#bioMetricDataInP td {
        margin: 0.75rem;
        padding: 0 !important;
        width: 20px !important;
    }

        table#bioMetricDataInP td.tdCell {
            border-radius: 0px !important;
        }

            table#bioMetricDataInP td.tdCell .item.st,
            table#bioMetricDataInP td.tdCell .item.st {
                border-top-left-radius: 5px;
                border-bottom-left-radius: 5px;
                float: right;
            }

            table#bioMetricDataInP td.tdCell .item.en {
                border-top-right-radius: 5px;
                border-bottom-right-radius: 5px;
            }
            table#bioMetricDataInP td.tdCell .item {
                height: 20px;
            }

    table#bioMetricDataInP tr.row-bio td {
        border-top: none !important;
        padding: 5px 0px !important;
        padding-top: 0px !important;
    }

        table#bioMetricDataInP tr.row-bio td.clk-rcd span {
            position: relative;
            top: -1px;
        }

    table#bioMetricDataInP tr.row-wt td {
        padding: 15px 0px !important;
        padding-bottom: 1px !important;
    }

    table#bioMetricDataInP tr.row-hrs td {
        padding: 15px 0px !important;
        position: relative;
        left: -18px;
        top: -12px;
    }
</style>

<h6 class="head1">Work time on @Model.Date.ToLocalFormat()</h6>

@if (Model.HasError)
{
    <div class="alert alert-danger">
        <i class="fa fa-exclamation-circle"></i> @Model.ErroMsg
    </div>
}
@*@date |{ @startTimeSpan * @endTimeSpan }*@
<p class="form-group">
    <img src="@Url.Content(Model.Employee.Avatar ?? DefaultPictures.default_user)" class="rounded-circle" height="30" /> @Model.Employee.GetSystemName(User)
</p>

<p class="form-group">
    <a class="" asp-action="ViewAttendance" asp-controller="Schedule" asp-route-id="@(Model.Id)" data-ajax-method="GET" data-ajax="true" data-ajax-update=".modal__container" data-ajax-begin="showModal()" data-ajax-failure="HandleModalPostFailure" style="text-decoration:none !important"> <span class="sch-@Model.ShiftColor text-white p-2 rounded">Work time: @Model.Duration</span> </a>

</p>


<table class="table" id="bioMetricDataInP">
    <thead>
        <tr>
            <td colspan="@((23-startTimeSpan.Hour + 1))">
                <div class="@(Model.Date.Date >= DateTime.Now.Date ? "active" : "") text-center">
                    <div class="text-left font-weight-bold" style=" vertical-align: middle;display:inline-flex">
                        <h3 class="mt-1 pr-1">@Model.Date.Day</h3>
                        <div class="name-display pl-1" style="font-size: 11px;padding-top: 4px;">
                            <span class="">@Model.Date.ToString("ddd").ToUpper()</span>
                            <br>
                            <small style="position: relative;top: -4px;">@Model.Date.ToString("MMM").ToString()</small>
                        </div>
                    </div>
                </div>
            </td>
            @if (startTimeSpan.Date != endTimeSpan.Date)
            {

                <td colspan="@(24-1- (23-startTimeSpan.Hour))" style="border-left: 1px solid #dee2e6;">
                    <div class="@(Model.Date.Date >= DateTime.Now.Date ? "active" : "") text-center">
                        <div class="text-left font-weight-bold" style=" vertical-align: middle;display:inline-flex">
                            <h3 class="mt-1 pr-1">@endTimeSpan.Date.Day</h3>
                            <div class="name-display pl-1" style="font-size: 11px;padding-top: 4px;">
                                <span class="">@endTimeSpan.Date.ToString("ddd").ToUpper()</span>
                                <br>
                                <small style="position: relative;top: -4px;">@endTimeSpan.ToString("MMM").ToString()</small>
                            </div>
                        </div>
                    </div>
                </td>
            }
        </tr>
    </thead>
    <tbody>
        <tr class="row-wt">
            @for (DateTime start = startTimeSpan; start <= endTimeSpan; start = start.Add(TimeSpan.FromHours(1)))
            {
                if (start.Hour % 2 == 1)
                {
                    if ((start >= Model.WorkStartTime &&
                  start.Add(TimeSpan.FromHours(2)) <= Model.WorkEndTime))
                    {
                        <td colspan="2" class="tdCell">
                            <div class="item sch item-@Model.Id sch-@Model.ShiftColor" style="">
                                <small>
                                    <span>

                                    </span>
                                    <br>
                                </small>
                            </div>
                        </td>
                    }
                    else if ((start < Model.WorkStartTime &&
                      start.Add(TimeSpan.FromHours(2)) > Model.WorkStartTime)

                      || (start < Model.WorkEndTime &&
                      start.Add(TimeSpan.FromHours(2)) > Model.WorkEndTime))
                    {
                        var width = (start < Model.WorkStartTime || start < Model.WorkEndTime) ? 50 : 100;
                        var css = (start < Model.WorkStartTime) ? "st" : "en";
                        <td colspan="2" class="tdCell ">
                            <div class="item @css sch item-@Model.Id sch-@Model.ShiftColor" style="width:@width%" title="@(css == "st" ? (Model.WorkStartTime.ToLocalFormat(true) + " - Work Start") : css == "en" ? (Model.WorkEndTime.ToLocalFormat(true) + " - Work End") : "")">
                                <small>
                                    <span>

                                    </span>
                                    <br>
                                </small>
                            </div>
                        </td>
                    }
                    else
                    {
                        <td colspan="2" class="tdCell">
                            <div class="" style="">
                                <small>
                                    <span>

                                    </span>
                                    <br>
                                </small>
                            </div>
                        </td>
                    }
                }
            }
        </tr>

        @if (true)
        {

            <tr class="row-bio">
                @for (DateTime start = startTimeSpan; start <= endTimeSpan; start = start.Add(TimeSpan.FromHours(1)))
                {
                    if (start.Hour % 2 == 1)
                    {
                        <td colspan="2" class="clk-rcd tdCell">
                            @* Two Ends () *@
                            @if (_bioRecrds.Any(r => start < r.DateTime &&
                        start.Add(TimeSpan.FromHours(2)) >= r.DateTime))
                            {
                                foreach (var item in _bioRecrds.Where(r => start < r.DateTime &&
                                start.Add(TimeSpan.FromHours(2)) >= r.DateTime))
                                {
                                    var left = item.BiometricRecordState == BiometricRecordState.CheckIn | item.BiometricRecordState == BiometricRecordState.BreakIn ?
                                    ((start.Add(TimeSpan.FromHours(2)) - item.DateTime).TotalHours / 2) * 100 : ((item.DateTime - start).TotalHours / 2) * 100;

                                    var css = (item.BiometricRecordState == BiometricRecordState.CheckIn || item.BiometricRecordState == BiometricRecordState.BreakIn) ? "st" : "en";
                                    <div class="item item-checkInOut sch item- sch-checkInOut @css" style="width:@left%" onclick="$('p.recrd').removeClass('font-weight-bold');$('.recrd_@item.Id').toggleClass('font-weight-bold')" title="@item.DateTime.TimeOfDay - @item.BiometricRecordState">
                                        <span>
                                            &nbsp;
                                            @*<i class="fa fa-clock"></i>*@
                                        </span>
                                    </div>
                                }
                            }
                            @* Middle spaces *@
                            else if ((start > _bioRecrds?.FirstOrDefault(z => z.BiometricRecordState == BiometricRecordState.CheckIn)?.DateTime &&
                                          start.Add(TimeSpan.FromHours(2)) < _bioRecrds?.FirstOrDefault(z => z.BiometricRecordState == BiometricRecordState.BreakOut)?.DateTime)
                                  ||
                                  (start > _bioRecrds?.FirstOrDefault(z => z.BiometricRecordState == BiometricRecordState.CheckIn)?.DateTime &&
                                          start.Add(TimeSpan.FromHours(2)) < _bioRecrds?.FirstOrDefault(z => z.BiometricRecordState == BiometricRecordState.CheckOut)?.DateTime)

                                  || (start < mappedTimes.FirstOrDefault() &&
                                  start.Add(TimeSpan.FromHours(2)) > mappedTimes.LastOrDefault()))
                            {
                                <div class="item item-checkInOut sch item- sch-checkInOut" style="">
                                    <span> 
                                        &nbsp; 
                                    </span>
                                </div>
                            }
                            @*<div class="item sch item-@Model.Id sch-@Model.ShiftColor" style="">
                                    <small>
                                        <span>
                                            @@
                                        </span>
                                        <br>
                                    </small>
                                </div>*@
                        </td>
                    }
                }
            </tr>
        }
        <tr class="row-hrs">
            @for (DateTime start = startTimeSpan; start <= endTimeSpan; start = start.Add(TimeSpan.FromHours(1)))
            {
                if (start.Hour % 2 == 1)
                {
                    <td colspan="2" class="@start">
                        @start.Hour
                    </td>
                }
            }
        </tr>
        <tr>
            <td colspan="@((endTimeSpan-startTimeSpan).TotalHours)" class="text-center" style="border-top:none !important">
                <span class="">(hours)</span>
            </td>
        </tr>
    </tbody>
</table>

<ul class="list-group text-left border-0">
    <li class="list-group-item border-0">
        <span>Status</span>
        <span class="float-right">
            @Html.Raw(Model.StatusString)
            @if (Model.CurrentStatus == AttendanceStatus.Early || Model.CurrentStatus == AttendanceStatus.Late)
            {
                <span class='text-muted'>(@(Model.CurrentStatus == AttendanceStatus.Early ? ((int)Model.TotalEarlyMins + " mins early") : ((int)Model.TotalLateMins + " mins late")))</span>
            }
        </span>
    </li>
    <li class="list-group-item border-0">
        <span>Total Worked Hours (per schedule)</span>
        <strong class="float-right">@Model.TotalWorkedHours.ToString("N2") (@Model.TotalHoursWorkedPerSchedule.ToString("N2"))</strong>
    </li>
    <li class="list-group-item border-0">
        <span>Working Hours</span>
        <strong class="float-right">@Model.TotalWorkedHours.ToString("N2")</strong>
    </li>
    <li class="list-group-item border-0">
        <span>In break Hours</span>
        <strong class="float-right">@Model.TotalBreakHours.ToString("N2")</strong>
    </li>
</ul>

