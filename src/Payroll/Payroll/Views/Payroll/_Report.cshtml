@model (List<EmployeePayCompare2D>, List<Tuple<string, VariationType, decimal, decimal>>, List<Tuple<string, int, decimal, decimal>>, List<Tuple<string, int, decimal, decimal>>)
@{

    Dictionary<int, string> payAdjustments = (Dictionary<int, string>)ViewBag.PayAdjustments;
    var i = 1;
    var j = 1;
}

<style>
    .card-container img {
        height: 100px;
        width: 100px;
        margin-bottom: 4px;
    }

    .card-container .pro {
        color: #ffffff;
        background-color: #1c9e10;
        border-radius: 3px;
        font-size: 22px;
        font-weight: bold;
        padding: 4px 12px;
        position: absolute;
        top: 10px;
        left: 10px;
    }

    .chartdiv {
        width: 100%;
        height: 700px;
    }

    .wrapper div.icon {
        font-size: 20px;
        font-weight: 400;
    }

</style>
@*<h5 class="text-left">
    Reports and Analysis
    <br />
    <small class="pt-1">View Top and black listed employee lists and pay adjustments</small>
</h5>*@

@if (ViewBag.IsError != null && (bool)ViewBag.IsError && ViewBag.InsufficientData != null && (bool)ViewBag.InsufficientData)
{
    <div style="padding:20px;padding-top:30px" class="text-center">
        <h4>Oops! There is insufficient data for reports</h4>
        <span>Our reports requires minimun of 7 employees and 2 or more variable adjustments</span>
    </div>
}
else if (ViewBag.IsError != null && (bool)ViewBag.IsError)
{
    <div style="padding:20px;padding-top:30px" class="text-center">
        <h4>Sorry! Payroll Incomplete</h4>
        <span>Payroll needs to be calculated to view reports</span>
    </div>
}
else
{
    <div id="reports-table" class="mt-2">

        <h3 class="text-center pt-2 text-success font-weight-bold">TOP LIST</h3>
        <div class="row">
            @foreach (var emp in Model.Item1.Where(x => x.isAdd))
            {

                <div class="col-md-4">
                    <div class="wrapper" style="transform:scale(1)">
                        <div class="container" style="padding: 15px;">
                            <div class="top text-center">
                                <div class="mb-2">
                                    <img class="round" src="@Url.Content(emp.Employee.Avatar ?? DefaultPictures.default_user)" alt="user" style="width: 105px;border-radius: 50%">
                                </div>

                                <h4 class="font-weight-bold">@emp.EmpName</h4>

                                <h6 class="text-muted font-weight-bold">@emp.Employee.Designation</h6>

                                <h5 style="margin: 10px 0;"><span class="bg-success p-2 text-white" style="border-radius: 4px;">MVR @emp.TopAddAmnt.ToString("N0")</span></h5>
                            </div>
                        </div>
                        <div class="inside bg-success">
                            <div class="icon"><span class="pro _@i">@(i++)</span></div>
                            <div class="contents table table-sm">
                                <table>
                                    <tr>
                                        <td colspan="2" class="border-top-0"><b>Top Additions</b></td>
                                    </tr>
                                    @foreach (var item in emp.AddArray)
                                    {
                                        <tr>
                                            <td class="" style="">
                                                @item.Key
                                            </td>

                                            <td style="font-weight: 500;">MVR @item.Value.ToString("N0")</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="2">
                                            Take Home overall &mdash; <b>MVR @emp.NetPay.ToString("N0")</b>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>

        <table class="table">
            <thead>
                <tr>
                    <td>Top Addition Pay Component</td>
                    <td>Total Employees</td>
                    <td>Average per Employee</td>
                    <td>Sum</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Item3.OrderByDescending(a => a.Item3))
                {
                    <tr>
                        <td>@item.Item1</td>
                        <td>@item.Item2</td>
                        <td>MVR @item.Item4.ToString("N2")</td>
                        <td>MVR @item.Item3.ToString("N2")</td>
                    </tr>
                }
            </tbody>
        </table>

        <hr />

        <h3 class="text-center pt-2 text-danger font-weight-bold">BLACK LIST</h3>

        <div class="row">
            @foreach (var emp in Model.Item1.Where(x => !x.isAdd))
            {

                <div class="col-md-4">
                    <div class="wrapper" style="transform:scale(1)">
                        <div class="container" style="padding: 15px;">
                            <div class="top text-center">
                                <div class="mb-2">
                                    <img class="round" src="@Url.Content(emp.Employee.Avatar ?? DefaultPictures.default_user)" alt="user" style="width: 105px;border-radius: 50%">
                                </div>

                                <h4 class="font-weight-bold">@emp.EmpName</h4>

                                <h6 class="text-muted font-weight-bold">@emp.Employee.Designation</h6>

                                <h5 style="margin: 10px 0;"><span class="bg-danger p-2 text-white" style="border-radius: 4px;">MVR @emp.TopAddAmnt.ToString("N0")</span></h5>
                            </div>
                        </div>
                        <div class="inside bg-danger">
                            <div class="icon"><span class="pro _@j">@(j++)</span></div>
                            <div class="contents table table-sm">
                                <table>
                                    <tr>
                                        <td colspan="2" class="border-top-0"><b>Top Additions</b></td>
                                    </tr>
                                    @foreach (var item in emp.AddArray)
                                    {
                                        <tr>
                                            <td class="" style="">
                                                @item.Key
                                            </td>

                                            <td style="font-weight: 500;">MVR @item.Value.ToString("N0")</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="2">
                                            Take Home overall &mdash; <b>MVR @emp.NetPay.ToString("N0")</b>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>


        <table class="table">
            <thead>
                <tr>
                    <td>Top Deduction Pay Component</td>
                    <td>Total Employees</td>
                    <td>Average per Employee</td>
                    <td>Sum</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Item4.OrderByDescending(a => a.Item3))
                {
                    <tr>
                        <td>@item.Item1</td>
                        <td>@item.Item2</td>
                        <td>MVR @item.Item4.ToString("N2")</td>
                        <td>MVR @item.Item3.ToString("N2")</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}

<script>

am4core.ready(function () {

    //darwAdditionChart();
    //drawDeductionChart();

    //hidelogos();
    /// deduction chart

    }); // end am4core.ready()

    function darwAdditionChart() {
        var chart = am4core.create("chart_addiTren", am4charts.XYChart);

        var data = [];
        var open = 100;
        var close = 120;

    @foreach (var item in Model.Item2.Where(a=> a.Item2 == VariationType.VariableAddition))
    {
        <text>
        data.push({ category: '@item.Item1', open: '@item.Item3', close: '@item.Item4' });
        </text>
    }

        console.log(data);
        chart.data = data;
        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.dataFields.category = "category";
        categoryAxis.renderer.minGridDistance = 15;
        categoryAxis.renderer.grid.template.location = 0.5;
        categoryAxis.renderer.grid.template.strokeDasharray = "1,3";
        categoryAxis.renderer.labels.template.rotation = -90;
        categoryAxis.renderer.labels.template.horizontalCenter = "left";
        categoryAxis.renderer.labels.template.location = 0.5;
        categoryAxis.renderer.inside = false;

        //categoryAxis.renderer.labels.template.adapter.add("dx", function (dx, target) {
        //    return -target.maxRight / 2;
        //})

        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.tooltip.disabled = true;
        valueAxis.renderer.ticks.template.disabled = true;
        valueAxis.renderer.axisFills.template.disabled = true;

        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.categoryX = "category";
        series.dataFields.openValueY = "open";
        series.dataFields.valueY = "close";
        series.tooltipText = ":[font-weight: 500] MVR {valueY.value} — MVR {openValueY.value}";
        series.sequencedInterpolation = false;
        series.fillOpacity = 0;
        series.strokeOpacity = 1;
        series.columns.template.width = 0.01;
        series.tooltip.pointerOrientation = "horizontal";

        var openBullet = series.bullets.create(am4charts.CircleBullet);
        openBullet.locationY = 1;

        var closeBullet = series.bullets.create(am4charts.CircleBullet);

        closeBullet.fill = chart.colors.getIndex(4);
        closeBullet.stroke = closeBullet.fill;

        chart.cursor = new am4charts.XYCursor();

        //chart.scrollbarX = new am4core.Scrollbar();
        //chart.scrollbarY = new am4core.Scrollbar();
    }


    function drawDeductionChart() {
        var chart = am4core.create("chart_dedTren", am4charts.XYChart);

        var data = [];
        var open = 100;
        var close = 120;

    @foreach (var item in Model.Item2.Where(a=> a.Item2 == VariationType.VariableDeduction))
    {
        <text>
        data.push({ category: '@item.Item1', open: '@item.Item3', close: '@item.Item4' });
        </text>
    }

        console.log(data);
        chart.data = data;
        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.dataFields.category = "category";
        categoryAxis.renderer.minGridDistance = 15;
        categoryAxis.renderer.grid.template.location = 0.5;
        categoryAxis.renderer.grid.template.strokeDasharray = "1,3";
        categoryAxis.renderer.labels.template.rotation = -90;
        categoryAxis.renderer.labels.template.horizontalCenter = "left";
        categoryAxis.renderer.labels.template.location = 0.5;
        categoryAxis.renderer.inside = false;

        //categoryAxis.renderer.labels.template.adapter.add("dx", function (dx, target) {
        //    return -target.maxRight / 2;
        //})

        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.tooltip.disabled = true;
        valueAxis.renderer.ticks.template.disabled = true;
        valueAxis.renderer.axisFills.template.disabled = true;

        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.categoryX = "category";
        series.dataFields.openValueY = "open";
        series.dataFields.valueY = "close";
        series.tooltipText = ":[font-weight: 500] MVR {valueY.value} — MVR {openValueY.value}";
        series.sequencedInterpolation = true;
        series.fillOpacity = 0;
        series.strokeOpacity = 1;
        series.columns.template.width = 0.01;
        series.tooltip.pointerOrientation = "horizontal";

        var openBullet = series.bullets.create(am4charts.CircleBullet);
        openBullet.locationY = 1;

        var closeBullet = series.bullets.create(am4charts.CircleBullet);

        closeBullet.fill = chart.colors.getIndex(4);
        closeBullet.stroke = closeBullet.fill;

        chart.cursor = new am4charts.XYCursor();

        //chart.scrollbarX = new am4core.Scrollbar();
        //chart.scrollbarY = new am4core.Scrollbar();
    }
</script>